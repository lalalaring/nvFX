#extension GL_ARB_separate_shader_objects : enable

//////////////////////////////////////////////////////////
// Note: "global" would in the case where many effects yse this constant buffer
// to share it accross effects: therefore allowing to share the UBO creation and updates
// this example doesn't really need this keyword, though
ConstantBuffer global transfBlock1
{
    uniform mat4 m4_ViewProj;
    uniform mat4 m4_Proj;
    uniform mat4 m4_View;
    uniform mat4 m4_ViewIT;
    uniform vec3 eyePos : EYEPOS;
    uniform float dummy;
}

ConstantBuffer global transfBlock2
{
    uniform mat4 m4_World;
    uniform mat4 m4_WorldView;
    uniform mat4 m4_WorldViewProj;
    uniform mat4 m4_WorldIT;
};
ConstantBuffer global materialBlock
{
    uniform vec3     diffuse;
    uniform float    specexp;
    uniform vec3     ambient;
    uniform float    reflectivity;
    uniform vec3     transparency;
    uniform float    translucency;
    uniform vec3     specular;
};

uniform vec4 scaleBias = {0,0,0,1.0}; // x,y,z bias and w==scale
uniform int numLights = 3;
//////////////////////////////////////////////////////////

RasterizationState rasterState1
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, FILL};
}
RasterizationState rasterStateWire
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, LINE};
}
DepthStencilState dstStateFloor
{
    DEPTH_TEST = true;
    DEPTH_WRITEMASK = true;
    DEPTH_FUNC = LEQUAL;
}
//////////////////////////////////////////////////////////////
// GLSL Globals : meaning that all the GLSL domains (vertex, fragments etc.) will have a copy
// of these data
//
GLSLShader 
{
    #version 420 compatibility
    // light information
    struct LIGHTRES
    {
        vec3 ambientContrib;
        vec3 diffContrib;
        vec3 specContrib;
        vec3 R;	// reflection vector : returned by the reflection computation
    };
    struct LIGHTINFOS
    {
        vec3 Pw;	// fragment world pos to give to the lighting computation
        vec3 Vn;	// view direction to give to the lighting computation
        vec3 Nb;	// Normal to give to the lighting computation
        float SpecExpon; // specular exponent to give to light computation
        //float occlusion; // occlusion factor : in some cases we may want to modify the lighting according to a pre-computed map
    };
    // forward decalarations
    vec4 getDiffuse(vec3 inTc);
    void lighting_compute(LIGHTINFOS infos, inout LIGHTRES res);
}

//////////////////////////////////////////////////////////
// when declaring a sampler outside of any module : sampler can be known by nvFx (instrospection)
// and shared between various pieces of code (replicated for every single program)
uniform sampler2D specSampler;

///////////////////////////////////////////////////////////////////////////////////////////////////
// sampler states are outside of GLSL.
// names allows to make them match with the texture/sampler of GLSL (HLSL, too)
// or maybe we would require the runtime to connect them explicitly...
//
SamplerState specSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR_MIPMAP_LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    //AddressS = REPEAT;
    //AddressT = REPEAT;
    //AddressR = REPEAT;
}
SamplerState defaultSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR_MIPMAP_LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
}
SamplerState nearestSampler
{
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
}
//
// Texture Resources
//
TextureResource2D Default_color <
    defaultFile = "gargoyleMossyDiffuse.dds";
> {
    // this is a possible alternate way to setup sampler-states...
    // in OpenGL, sampler-states are defined for each texture
    // sampler-states specified in the Pass override this one
    SamplerState = defaultSamplerState;
}
TextureResource2D Default_spec <
    defaultFile = "gargoyleMossySpec.dds";
> {
    SamplerState = defaultSamplerState;
}

////////////////////////////////////////////////////////////////////
/// Subroutine Lighting  code //////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader LightingModelSubRoutines
{
    const int MaxSize = 3;
    //
    // Subroutine Prototype
    //
    subroutine void LightingComputationType(int i, LIGHTINFOS infos, inout LIGHTRES prevres);
    //
    // The array of subroutines
    //
    subroutine uniform LightingComputationType      lightingComputation[MaxSize];
    //
    // Lighting experiment. Should be in an include file
    //
    struct LightData
    {
        vec3 LightPos;
        vec3 LightDir;
        vec3 LightColor;
        vec3 LightColorSpec;
        vec3 lightI_SCos_SExp;
        vec3 LightAmbient;
    };
    LightData lightData[MaxSize] = 
        // To illustrate the test, let's use constuctors... but normally these should be updated by the app.
        LightData[3](
            LightData(vec3(0.5,0,0),vec3(1,0,0),vec3(1.0,0.6,0.6),vec3(1.0,0.6,0.6),vec3(1,0.9,1.0),vec3(0.00)),
            LightData(vec3(-0.2,0.5,0),vec3(0,1,0),vec3(0.6,1.0,0.6),vec3(0.6,1.0,0.6),vec3(1,0.9,1.0),vec3(0.00)),
            LightData(vec3(-0.3,0,0.5),vec3(0,0,1),vec3(0.6,0.6,1.0),vec3(0.6,0.6,1.0),vec3(1,0.9,1.0),vec3(0.00))
            );
    //
    // Lighting Models
    //
    subroutine(LightingComputationType)
    void lighting_compute_None(const int i, LIGHTINFOS infos, inout LIGHTRES res)
    {
    }
    subroutine(LightingComputationType)
    void lighting_compute_Dir(const int i, LIGHTINFOS infos, inout LIGHTRES res)
    {
        vec3 Ln = normalize(lightData[i].LightDir); // we could do normalize outside...
        vec3 Hn = (infos.Vn + Ln)/2.0;
        float NdotL = max(dot(Ln,infos.Nb), 0.0);
        float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn,infos.Nb)),infos.SpecExpon) : 0.0;
        res.diffContrib += (NdotL /** lightI_SCos_SExp.x*/) * lightData[i].LightColor;
        res.specContrib += (HdotN /** res.diffContrib*/) * lightData[i].LightColorSpec;
        res.ambientContrib += lightData[i].LightAmbient;
    }
    subroutine(LightingComputationType)
    void lighting_compute_Point(const int i, LIGHTINFOS infos, inout LIGHTRES res)
    {
        vec3 Ln = normalize(lightData[i].LightPos - infos.Pw);
        vec3 Hn = normalize(infos.Vn + Ln);
        float NdotL = max(dot(Ln,infos.Nb), 0.0);
        float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn,infos.Nb)),infos.SpecExpon) : 0.0;
        res.diffContrib += (NdotL /** lightI_SCos_SExp.x*/) * lightData[i].LightColor;
        res.specContrib += (HdotN * res.diffContrib) * lightData[i].LightColorSpec;
        res.ambientContrib += lightData[i].LightAmbient;
    }
    subroutine(LightingComputationType)
    void lighting_compute_Spot(const int i, LIGHTINFOS infos, inout LIGHTRES res)
    {
        vec3 Ln = normalize(lightData[i].LightPos - infos.Pw);
        vec3 Hn = normalize(infos.Vn + Ln);
        float Ca = dot(Ln, normalize(lightData[i].LightDir));
        if(Ca < lightData[i].lightI_SCos_SExp.y) Ca = 0.0;
        float NdotL = max(dot(Ln,infos.Nb), 0.0);
        float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn,infos.Nb)),infos.SpecExpon) : 0.0;
        res.diffContrib += Ca * (NdotL /** lightI_SCos_SExp.x*/) * lightData[i].LightColor;
        res.specContrib += Ca * (HdotN * res.diffContrib) * lightData[i].LightColorSpec;
        res.ambientContrib += lightData[i].LightAmbient;
    }
    //
    // Main entry point for lighting
    //
    void lighting_compute(LIGHTINFOS infos, inout LIGHTRES res)
    {
        res.diffContrib = vec3(0.4);
        //for(int i=0; i<numLights; i++)
        //    lightingComputation[i](i, infos, res);
    }
}
////////////////////////////////////////////////////////////////////
/// Empty Lighting /////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader LightingModelBasic
{
    void lighting_compute(LIGHTINFOS infos, inout LIGHTRES res)
    {
        vec3 Ln = vec3(0,1,0);
        vec3 Hn = (infos.Vn + Ln)/2.0;
        float NdotL = max(dot(Ln,infos.Nb), 0.0);
        float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn,infos.Nb)),60.0) : 0.0;
        res.diffContrib += NdotL;
        res.specContrib += HdotN;
        res.ambientContrib += vec3(0.05);
    }

}
////////////////////////////////////////////////////////////////////
/// VERTEX PROGRAM /////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader ObjectVS
{
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 Normal;
    layout(location=2) in vec3 TexCoord;
    layout(location=3) in vec3 Tangent;
    layout(location=4) in vec3 Binormal;

    layout(location=0) out vec3 outNw;
    layout(location=1) out vec3 outTC;
    layout(location=4) out vec3 outPw;
    layout(location=5) out vec3 outWV;

    out gl_PerVertex {
        vec4 gl_Position;
    };

    void main(void)
    {
        vec3 N    = normalize((m4_World/*IT*/ * vec4(Normal,0)).xyz);
        vec4 Po    = Position;
        Po.xyz += scaleBias.xyz;
        Po.xyz *= scaleBias.w;
        vec3 Pw     = (m4_World * Po).xyz;

        gl_Position = (m4_WorldViewProj * Po);
        // Here we do this on purpose to test the UBO use :
        //gl_Position = (m4_World * Po);
        //gl_Position = (m4_View * gl_Position); // UBO
        //gl_Position = (m4_Proj * gl_Position); // UBO

        outNw           = N;
        outPw           = Pw;
        outTC           = TexCoord;
        outWV           = normalize(eyePos - Pw);;
    }
}
////////////////////////////////////////////////////////////////////
/// Read some diffuse color ////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader DiffuseFromTexture
{
    // when declaring inside a module, this sampler cannot be known by nvFx (no instrospection)
    uniform sampler2D diffuseSampler;
    vec4 getDiffuse(vec3 tc)
    {
        //return vec4(tc,0.0);
        return texture(diffuseSampler, vec2(tc.x, 1.0 - tc.y));
    }
}
GLSLShader DiffuseFromNothing
{
    vec4 getDiffuse(vec3 tc)
    {
        return vec4(diffuse, 1.0);
    }
}
////////////////////////////////////////////////////////////////////
/// FRAGMENT PROGRAM ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader ObjectPS
{
    layout(location=0) in vec3 inNw;
    layout(location=1) in vec3 inTC;
    layout(location=4) in vec3 inPw;
    layout(location=5) in vec3 inWV;

    layout(location=0) out vec4 color;

    void main() 
    {
        vec4 texcolor = getDiffuse(inTC);
        vec4 texspec = 3.0 * texture(specSampler, vec2(inTC.x, 1.0 - inTC.y));
        vec3 Nn = normalize(inNw);
        vec3 Vn = normalize(inWV);

        LIGHTRES res;
        res.ambientContrib = vec3(0,0,0);
        res.diffContrib = vec3(0,0,0);
        res.specContrib = vec3(0,0,0);

        LIGHTINFOS infos;
        infos.Vn = Vn;
        infos.Nb = Nn;
        infos.Pw = inPw;
        infos.SpecExpon = specexp;
        // -------------------------------
        // OUTSOURCED LIGHTING COMPUTATION : defined in LightingModelBasic and LightingModelSubRoutines
        lighting_compute(infos, res);
        // -------------------------------

        vec3 result = 
            texcolor.rgb * (res.diffContrib + res.ambientContrib)
            + texspec.rgb * res.specContrib;
        color = vec4(result, 0.0);

    }
}
////////////////////////////////////////////////////////////////////
/// Floor things
////////////////////////////////////////////////////////////////////
namespace floor
{
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's VERTEX PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader VS
    {
        layout(location=0) in vec4 Position;
        out gl_PerVertex {
            vec4 gl_Position;
        };
        void main(void)
        {
            gl_Position = m4_ViewProj * Position;
        }
    }
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's FRAGMENT PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader PS
    {
        layout(location=0) out vec4 color;
        void main() 
        {
            color = vec4(0.3, 0.5, 0.7, 1.0);
        }
    }
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Material Technique
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

Technique TECH_INIT
{
    Pass init
    {
        PolygonOffset = {1.0,1.0};
        DEPTH_TEST = True;
        DEPTH_FUNC = LEQUAL;
        DEPTH_MASK = True;
    }
}

Technique TECH_WIREFLOOR
{
    Pass p0
    {
        //RasterizationState = rasterStateWire;
        //DepthStencilState = dstStateFloor;

        VertexProgram = floor::VS;
        FragmentProgram = floor::PS;
    }
}
Technique subroutine_lighting
{
    Pass p0
    {
        RasterizationState = rasterState1;
        //POLYGON_MODE={FRONT_AND_BACK, FILL};
        SamplerState(diffuseSampler) = defaultSamplerState;
        // in this case resource choice is made from the pass: (other case: the pass could avoid this
        // while the resource binding would be made by the application runtime)
        SamplerResource(diffuseSampler) = Default_color;
        SamplerState(specSampler) = defaultSamplerState;
        SamplerResource(specSampler) = Default_spec;
        VertexProgram = ObjectVS;
        FragmentProgram = { ObjectPS, DiffuseFromTexture };
        FragmentProgram<"lighting"> = LightingModelSubRoutines;
        // Those are default settings
        // sub-routines are interesting because they can be changed at runtime without the need to recompile
        // this is what the sample will allow to do
        Uniform(lightingComputation)  = { 
            lighting_compute_Dir, 
            lighting_compute_Spot, 
            lighting_compute_Spot };
    }
}

Technique TECH_NO_DIFFTEX
{
    Pass p0
    {
        RasterizationState = rasterState1;
        //POLYGON_MODE={FRONT_AND_BACK, FILL};
        // we assume here that the resource will be set by the app
        SamplerState(specSampler) = defaultSamplerState;
        SamplerResource(specSampler) = Default_spec;
        VertexProgram = ObjectVS;
        FragmentProgram = { ObjectPS, DiffuseFromNothing };
        FragmentProgram<"lighting"> = LightingModelBasic;
    }
}
Technique TECH_WIREFRAME
{
    Pass p0
    {
        RasterizationState = rasterStateWire;
        //POLYGON_MODE={FRONT_AND_BACK, FILL};
        // we assume here that the resource will be set by the app
        SamplerState(specSampler) = defaultSamplerState;
        SamplerResource(specSampler) = Default_spec;
        VertexProgram = ObjectVS;
        FragmentProgram = { ObjectPS, DiffuseFromNothing };
        FragmentProgram<"lighting"> = LightingModelBasic;
    }
}
