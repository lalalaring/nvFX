/*
    Copyright (c) 2013, NVIDIA CORPORATION. All rights reserved.
    Copyright (c) 2013, Tristan Lorach. All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Neither the name of NVIDIA CORPORATION nor the names of its
       contributors may be used to endorse or promote products derived
       from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
    OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    Please direct any questions to tlorach@nvidia.com (Tristan Lorach)
*/
//
// reference : http://alex.vlachos.com/graphics/CurvedPNTriangles.pdf
//
ConstantBuffer global transfBlock1
{
    uniform mat4 m4_ViewProj;
    uniform mat4 m4_Proj;
    uniform mat4 m4_View;
    uniform mat4 m4_ViewIT;
    uniform vec3 eyePos : EYEPOS;
    uniform float dummy;
}

ConstantBuffer global transfBlock2
{
    uniform mat4 m4_World;
    uniform mat4 m4_WorldView;
    uniform mat4 m4_WorldViewProj;
    uniform mat4 m4_WorldIT;
};
ConstantBuffer global materialBlock
{
    uniform vec3     diffuse;
    uniform float    specexp;
    uniform vec3     ambient;
    uniform float    reflectivity;
    uniform vec3     transparency;
    uniform float    translucency;
    uniform vec3     specular;
};
ConstantBuffer user_data
{
    uniform float scaleObject : SCALEOBJECT
    <
        Toto = "TEST";
        A = 0.1;
        B = 4;
    > = 0.1; // default data can be set and will be sent to GLSL at validation time
    uniform float attenuation;
    uniform vec4 surfColor = {0.8, 0.8, 0.99, 1};
    uniform float innerTessFactor =  4.0;
    uniform float outerTessFactor =  4.0;
}

uniform vec4 scaleBias = {0,0,0,1.0}; // x,y,z bias and w==scale
uniform vec3 lightPos[] = {{10,10,10},{10,10,-10}};
uniform vec3 lightColor[] = {{0.8,0.8,0.8},{0.5,0.5,0.7}};

//////////////////////////////////////////////////////////
// when declaring a sampler outside of any module : sampler can be known by nvFx (instrospection)
// and shared between various pieces of code (replicated for every single program)
uniform sampler2D specSampler;
uniform sampler2D diffuseSampler;

SamplerState specSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR_MIPMAP_LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
    //AddressS = REPEAT;
    //AddressT = REPEAT;
    //AddressR = REPEAT;
}
SamplerState defaultSamplerState
{
    TEXTURE_MIN_FILTER = LINEAR_MIPMAP_LINEAR;
    TEXTURE_MAG_FILTER = LINEAR;
}
SamplerState nearestSampler
{
    TEXTURE_MIN_FILTER = NEAREST;
    TEXTURE_MAG_FILTER = NEAREST;
}
//
// Texture Resources
//
TextureResource2D Default_color <
    defaultFile = "gargoyleMossyDiffuse.dds";
> {
    // this is a possible alternate way to setup sampler-states...
    // in OpenGL, sampler-states are defined for each texture
    // sampler-states specified in the Pass override this one
    SamplerState = defaultSamplerState;
}
TextureResource2D Default_spec <
    defaultFile = "gargoyleMossySpec.dds";
> {
    SamplerState = defaultSamplerState;
}

// State groups can then later be invoked from passes with :
//
//[SET]DepthStencil[_][STATE] = mygroup;
//[SET]RASTERIZATION[_][STATE] = mygroup;
//[SET]COLOR[_]SAMPLE[_][STATE] = mygroup;
RasterizationState rasterState1
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, FILL};
}
RasterizationState rasterStateWire
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, LINE};
}
RasterizationState rasterStateFloor
{
    LINE_WIDTH = 2;
    POLYGON_MODE={FRONT_AND_BACK, LINE};
}
DepthStencilState dstStateFloor
{
    DEPTH_TEST = true;
    DEPTH_WRITEMASK = true;
    DEPTH_FUNC = LEQUAL;
}
//
// GLSL Globals : meaning that all the GLSL domains (vertex, fragments etc.) will have a copy
// of these data
//
GLSLShader 
{
    #version 400 compatibility
    #extension GL_ARB_separate_shader_objects : enable
    #extension GL_ARB_tessellation_shader : enable

    struct TessControlStruct
    {
      vec4 position[3];
      vec3 normal[2];
      vec3 tc;
    };
}
////////////////////////////////////////////////////////////////////////////////////////////////////
/// ABSTRACTION
/// Let's imagine this module as providing ways to gather input attributes and provide them to 
/// shaderes whenever they need them
///
////////////////////////////////////////////////////////////////////////////////////////////////////
GLSLShader
{

  // getting attributes from the Input Assembly
  vec4 VS_getAttrPosition();
  vec3 VS_getAttrNormal();
  // additional attributes
  vec3 VS_getAttrTC0();
  // used to set interpolators from vertex shader or from TES stage
  vec4 VS_setClipPosition(vec4 p);
  vec3 VS_setPosition(vec3 p);
  vec4 VS_setPosition(vec4 p);
  vec3 VS_setWorldPosition(vec3 p);
  vec4 VS_setWorldPosition(vec4 p);
  vec4 VS_setColor(vec4 c);
  vec3 VS_setColor(vec3 c);
  vec3 VS_setNormal(vec3 n);
  vec3 VS_setWorldNormal(vec3 n);
  vec3 VS_setTC(vec3 tc);
  vec3 VS_setWorldViewDir(vec3 v);

  // IO_TCS
  vec4 TCS_getPosition(unsigned int i);
  vec3 TCS_getNormal(unsigned int i);

  // used by TES and TCS
  vec4 getPatchPosition(int i, int j);
  vec3 getPatchNormal(int i, int j);
  vec3 getPatchTC(int i);
  vec4 setPatchPosition(int j, vec4 p);
  vec3 setPatchNormal(int j, vec3 n);

  // used to arbitrarily interpolate some attributes
  vec3 TES_interpolateLinear(vec3 v1, vec3 v2, vec3 v3);

  // this function is the real code that we use for vertex shader AND TES shader
  void VSBody();
}

//////////////////////////////////////////////////
// Code for some tessellation
//
#include "PNTriangles.glslfxh"

//////////////////////////////////////////////////////////////////////////////////
// common modules for IO of fragments and vertex

// vertex shader I/O functions for when directly sent to a fragment shader
// namespace is used for cleaner naming and is really optional
namespace Vtx2Frag
{
  GLSLShader VSMain
  {
    // input
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 Normal;
    layout(location=2) in vec3 TexCoord;
    vec4 VS_getAttrPosition() { return (vec4(scaleBias.xyz,0.0) + Position) * vec4(scaleBias.www, 1.0); }
    vec3 VS_getAttrNormal()   { return Normal;   }
    vec3 VS_getAttrTC0()      { return TexCoord;   }
    // output
    out gl_PerVertex {
        vec4 gl_Position;
    };
    layout(location=0) out vec3 outNw;
    layout(location=1) out vec3 outTc;
    layout(location=4) out vec3 outPw;
    layout(location=5) out vec3 outWv;

    vec4 VS_setClipPosition(vec4 p) { gl_Position = p; return p; }
    vec3 VS_setPosition(vec3 p)     { /*outPo = p;*/ return p; }
    vec4 VS_setPosition(vec4 p)     { /*outPo = p.xyz;*/ return p; }
    vec3 VS_setWorldPosition(vec3 p){ outPw = p; return p; }
    vec4 VS_setWorldPosition(vec4 p){ outPw = p.xyz; return p; }
    vec4 VS_setColor(vec4 c)        { return c; }
    vec3 VS_setColor(vec3 c)        { return c; }
    vec3 VS_setNormal(vec3 n)       { return n; }
    vec3 VS_setTC(vec3 tc)          { outTc = tc; return tc; }
    vec3 VS_setWorldViewDir(vec3 v) { outWv = v; return v; }
    vec3 VS_setWorldNormal(vec3 n)  { outNw = n; return n; }
    // main entry point for the vertex shader
    void main(void)
    {
      VSBody();
    }
  }
}
////////////////////////////////////////////////////////////////////////////////////////
// Another implementation for tessellation case so the same vertex shader can be used
// The external implementation for tessellation will invoke some of these functions
// to get what it needs to work.
//
namespace PNTriangles
{
  ///////////////////////////////////////////////////////////////////////////
  // Functions for I/O in the VTX Stage
  ///////////////////////////////////////////////////////////////////////////
  GLSLShader VSMain
  {
    // input
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 Normal;
    layout(location=2) in vec3 TexCoord;
    vec4 VS_getAttrPosition() { return (vec4(scaleBias.xyz,0.0) + Position) * vec4(scaleBias.www, 1.0); }
    vec3 VS_getAttrNormal()   { return Normal;   }
    vec3 VS_getAttrTC0()      { return TexCoord;   }

    layout(location=0) out vec4 cpPosition;
    layout(location=1) out vec3 cpNormal;
    layout(location=2) out vec3 cpTc;
    // Code for useless values can be removed if those functions are empty:
    // while some are used because relevant in our context of Vtx stage for tessellation
    vec4 VS_setClipPosition(vec4 p) { return p; }
    vec3 VS_setPosition(vec3 p)     { cpPosition = vec4(p,1.0); return p; }
    vec4 VS_setPosition(vec4 p)     { cpPosition = p; return p; }
    vec3 VS_setNormal(vec3 n)       { cpNormal = n; return n; }
    vec3 VS_setWorldPosition(vec3 p){ return p; }
    vec4 VS_setWorldPosition(vec4 p){ return p; }
    vec4 VS_setColor(vec4 c)        { return c; }
    vec3 VS_setColor(vec3 c)        { return c; }
    vec3 VS_setTC(vec3 tc)          { cpTc = tc; return tc; }
    vec3 VS_setWorldViewDir(vec3 v) { return v; }
    vec3 VS_setWorldNormal(vec3 n)  { return n; }
    // main entry point for the vertex shader
    void main(void)
    {
      VSBody();
    }
  }
  ///////////////////////////////////////////////////////////////////////////
  // Functions for I/O in the TCS stage
  ///////////////////////////////////////////////////////////////////////////
  GLSLShader TCSMain
  {
    layout(location=0) in vec4 cpPosition[];
    layout(location=1) in vec3 cpNormal[];
    layout(location=2) in vec3 cpTc[];
    // This is the common basis needed anyways
    out TessControlStruct PatchPN[NPATCHVERTICES];
    // this is an example of an additional attribute to send down to the frag. shader
    vec4 TCS_getPosition(unsigned int i)      { return cpPosition[i]; }
    vec3 TCS_getNormal(unsigned int i)        { return cpNormal[i]; }

    vec4 getPatchPosition(int i, int j) { return PatchPN[i].position[j]; }
    vec3 getPatchNormal(int i, int j) { return PatchPN[i].normal[j]; }
    vec4 setPatchPosition(int j, vec4 p) { PatchPN[gl_InvocationID].position[j] = p; return p;}
    vec3 setPatchNormal(int j, vec3 n) { PatchPN[gl_InvocationID].normal[j] = n; return n; }

    void computeMainTCS(); // expected in the specialized part of tessellation
    // main entry point for the TCS
    void main() 
    {
      // this is where we would add-up any additional attributes
      // that are needed from our pipeline : the tessellation is not
      // supposed to know about those additional attribs (color, offsets...)
      // so we can't make them part of the tessellation math
      PatchPN[gl_InvocationID].tc=cpTc[gl_InvocationID]; // Texcoords
      // ... could have more...
      // then let's outsource the serious control-point work
      computeMainTCS();
    }

  }
  ///////////////////////////////////////////////////////////////////////////
  // Functions for I/O in the TES stage
  ///////////////////////////////////////////////////////////////////////////
  GLSLShader TESMain
  {
    in TessControlStruct PatchPN[NPATCHVERTICES];

    layout(location=0) out vec3 outNw;
    layout(location=1) out vec3 outTc;
    layout(location=4) out vec3 outPw;
    layout(location=5) out vec3 outWv;
    out gl_PerVertex {
        vec4 gl_Position;
    };
    vec3 VS_getAttrTC0() { return TES_interpolateLinear(getPatchTC(0),getPatchTC(1),getPatchTC(2)); }

    vec4 VS_setClipPosition(vec4 p) { gl_Position = p; return p; }
    vec3 VS_setPosition(vec3 p)     { /*outPo = p;*/ return p; }
    vec4 VS_setPosition(vec4 p)     { /*outPo = p.xyz;*/ return p; }
    vec3 VS_setWorldPosition(vec3 p){ outPw = p; return p; }
    vec4 VS_setWorldPosition(vec4 p){ outPw = p.xyz; return p; }
    vec4 VS_setColor(vec4 c)        { return c; }
    vec3 VS_setColor(vec3 c)        { return c; }
    vec3 VS_setNormal(vec3 n)       { return n; }
    vec3 VS_setTC(vec3 tc)          { outTc = tc; return tc; }
    vec3 VS_setWorldViewDir(vec3 v) { outWv = v; return v; }
    vec3 VS_setWorldNormal(vec3 n)  { outNw = n; return n; }

    vec4 getPatchPosition(int i, int j) { return PatchPN[i].position[j]; }
    vec3 getPatchNormal(int i, int j) { return PatchPN[i].normal[j]; }
    vec3 getPatchTC(int i) { return PatchPN[i].tc; }
    // main entry point for the TES
    void main()
    {
        // directly outsource the evalutation of vertices 
        // to the specialize tessellation part
        // will call VSBody() at the end to finally feed interpolators
        computeMainTES();
    }
  }
}

////////////////////////////////////////////////////////////////////
/// SHARED CODE FOR VERTEX PROGRAM AND TES /////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader VSBody
{
  //
  // TES and Vertex shader share the same common ground :
  // they both need to generate values for interpolators
  // the main difference between Input-Attributes and TES
  // are the way attributes are given
  //
  void VSBody()
  {
    vec3 No = normalize(VS_getAttrNormal());
    vec3 Nw = (m4_WorldIT * vec4(No,0)).xyz;
    vec4 Po = VS_getAttrPosition();
    vec3 Pw = (m4_World*Po).xyz;
    // Simple pass through part:
    VS_setPosition(Po);
    VS_setNormal(No);
    VS_setTC(VS_getAttrTC0());
    // more complex part:
    VS_setWorldPosition(Pw);
    VS_setClipPosition(m4_WorldViewProj * Po);
    VS_setWorldNormal(Nw);
    VS_setColor(Nw*0.5+0.5);//vec3(0.0,0.9,0));
    VS_setWorldViewDir(normalize(eyePos - Pw.xyz));
  }
}
////////////////////////////////////////////////////////////////////
/// FRAGMENT PROGRAM ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader PSMain
{
    layout(location=0) in vec3 inNw;
    layout(location=1) in vec3 inTC;
    layout(location=4) in vec3 inPw;
    layout(location=5) in vec3 inWv;
    layout(location=0) out vec4 outColor;
    void main() 
	{
        vec3 tc = inTC;
        vec4 texcolor = texture(diffuseSampler, vec2(tc.x, 1.0 - tc.y));
        vec4 texspec = 3.0 * texture(specSampler, vec2(tc.x, 1.0 - tc.y));

        vec3 Nn = normalize(inNw);
        vec3 Vn = normalize(inWv);

        vec3 result = vec3(0);
        for(int l=0; l<2; l++)
        {
            vec3 Ln = normalize(lightPos[l] - inPw);
            vec3 Hn = normalize(Vn + Ln);
            float NdotL = max(dot(Ln, Nn), 0.0);
            float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn, Nn)), 64.0) : 0.0;
            vec3 diffContrib = NdotL * lightColor[l];
            vec3 specContrib = HdotN * diffContrib;
            vec3 ambientContrib = vec3(0.01,0.01,0.03);
            result += texcolor.rgb * diffContrib + ambientContrib + texspec.rgb * specContrib;
        }
        outColor = vec4(result, 0.0);
	}
}
////////////////////////////////////////////////////////////////////
/// FLOOR's PROGRAMS ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
namespace floor
{
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's VERTEX PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader VS
    {
        layout(location=0) in vec4 Position;
        out gl_PerVertex {
            vec4 gl_Position;
        };
        void main(void)
        {
            gl_Position = m4_ViewProj * Position;
        }
    }
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's FRAGMENT PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader PS
    {
        layout(location=0) out vec4 color;
        void main() 
        {
            color = vec4(0.3, 0.5, 0.7, 1.0);
        }
    }
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Material Technique
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
Technique TECH_INIT
{
    Pass init
    {
        PolygonOffset = {1.0,1.0};
        DEPTH_TEST = True;
        DEPTH_FUNC = LEQUAL;
        DEPTH_MASK = True;
    }
}


Technique TECH_WIREFLOOR
{
    Pass p0
    {
        //RasterizationState = rasterStateWire;
        //DepthStencilState = dstStateFloor;

        VertexProgram = floor::VS;
        FragmentProgram = floor::PS;
    }
}

Technique PNTrianglesTech
{
    Pass p0
    {
        SamplerState(diffuseSampler) = defaultSamplerState;
        SamplerResource(diffuseSampler) = Default_color;
        SamplerState(specSampler) = defaultSamplerState;
        SamplerResource(specSampler) = Default_spec;
        //RasterizationState = rasterState1;

        // VSMain provides IO functions + main entry point
        // VSBody contains the real Vtx Shader code
        VertexProgram = {PNTriangles::VSMain, VSBody};
        // PNTriangles::TCSMain provides in/out functions + main entry point
        TCSProgram = {PNTriangles::TCSMain, PNtriTCS};
        // TESMain contains IO functions + main entry point
        // PNTriTES is the real tessellation work
        // Note that VSBody is here AGAIN: customized by TESMain IO functions !
        TESProgram = {PNTriangles::TESMain, PNTriTES,  VSBody};
        // Fragment program : nothin fancy. Just applying interpolators
        FragmentProgram = PSMain;
        // we can use this rather generic state for arbitraritly tell about
        // the fact that we need patch rendering
        RenderGroup = 3; // let's say 3 means PNTriangle primitives
    }
}

Technique BasicTech
{
    Pass p0
    {
        SamplerState(diffuseSampler) = defaultSamplerState;
        SamplerResource(diffuseSampler) = Default_color;
        SamplerState(specSampler) = defaultSamplerState;
        SamplerResource(specSampler) = Default_spec;
        //RasterizationState = rasterState1;

        // this simple VS=>PS case shows that the SAME code-base used for
        // tessellation is working for casual case.
        // this shows how to make tessellation an options in effects
        VertexProgram = {Vtx2Frag::VSMain, VSBody};
        FragmentProgram = PSMain;
        RenderGroup = 0; // let's say 0 means regular rendering
    }
}
