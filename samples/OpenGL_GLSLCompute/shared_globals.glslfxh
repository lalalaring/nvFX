/*
    Copyright (c) 2013, NVIDIA CORPORATION. All rights reserved.
    Copyright (c) 2013, Tristan Lorach. All rights reserved.

    Redistribution and use in source and binary forms, with or without
    modification, are permitted provided that the following conditions
    are met:
     * Redistributions of source code must retain the above copyright
       notice, this list of conditions and the following disclaimer.
     * Neither the name of NVIDIA CORPORATION nor the names of its
       contributors may be used to endorse or promote products derived
       from this software without specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
    PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
    OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
    (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    Please direct any questions to tlorach@nvidia.com (Tristan Lorach)
*/

GLSLShader
{
    // forward declaration
    void writeFragments(vec4 C, vec3 Pw, vec3 Nw);
}

ConstantBuffer global transfBlock1
{
    uniform mat4 m4_ViewProj;
    uniform mat4 m4_ViewProjI;
    uniform mat4 m4_Proj;
    uniform mat4 m4_View;
    uniform mat4 m4_ViewIT;
    uniform vec3 eyePos : EYEPOS;
    uniform float dummy;
}

ConstantBuffer global transfBlock2
{
    uniform mat4 m4_World;
    uniform mat4 m4_WorldView;
    uniform mat4 m4_WorldViewProj;
    uniform mat4 m4_WorldIT;
}
ConstantBuffer global materialBlock
{
    uniform vec3     diffuse;
    uniform float    specexp;
    uniform vec3     ambient;
    uniform float    reflectivity;
    uniform vec3     transparency;
    uniform float    translucency;
    uniform vec3     specular;
}

ConstantBuffer global lightBlock
{
    // LIGHT... we put semantic to stop the UI to display them...
    uniform vec3 lightPos : LIGHTPOS              = {10.0, 10.0, 0.0};
    uniform vec3 lightColor : LIGHTCOLOR          = {1.0, 1.0, 1.0};
    uniform vec3 lightColorSpec : LIGHTCOLORSPEC  = {1.0, 1.0, 1.0};
    uniform vec3 ambiLightColor : AMBILIGHTCOLOR  = {0.07, 0.07, 0.07};
    uniform vec3 surfColor : SURFCOLOR            = {0.2,0.0,0.5};
    uniform float   Shininess < uimin = 0.0; uimax = 128.0; >   = 30.0;
};

GLSLShader global fragmentOutputDefault
{
    layout(location=0) out vec4 outColor;
    void writeFragments(vec4 C, vec3 Pw, vec3 Nw)
    {
        outColor = C;
    }
}

GLSLShader global fragmentOutputColorAndDepth
{
    layout(location=0) out vec4 outColor;
    layout(location=1) out float outDepth;
    void writeFragments(vec4 C, vec3 Pw, vec3 Nw)
    {
        outColor = C;
        outDepth = Pw.z;
    }
}
GLSLShader global fragmentOutputColorAndNw
{
    layout(location=0) out vec4 outColor;
    layout(location=1) out vec3 outNw;
    void writeFragments(vec4 C, vec3 Pw, vec3 Nw)
    {
        outColor = C;
        outNw = Nw;
    }
}
