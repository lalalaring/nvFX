#extension GL_ARB_separate_shader_objects : enable

//////////////////////////////////////////////////////////
// Note: "global" would in the case where many effects yse this constant buffer
// to share it accross effects: therefore allowing to share the UBO creation and updates
// this example doesn't really need this keyword, though
ConstantBuffer global transfBlock1
{
    uniform mat4 m4_ViewProj;
    uniform mat4 m4_Proj;
    uniform mat4 m4_View;
    uniform mat4 m4_ViewIT;
    uniform vec3 eyePos : EYEPOS;
    uniform float dummy;
}

ConstantBuffer global transfBlock2
{
    uniform mat4 m4_World;
    uniform mat4 m4_WorldView;
    uniform mat4 m4_WorldViewProj;
    uniform mat4 m4_WorldIT;
};

// alternate solution without an uniform block. For comparison
uniform mat4 u_m4_World;
uniform mat4 u_m4_WorldView;
uniform mat4 u_m4_WorldViewProj;
uniform mat4 u_m4_WorldIT;

ConstantBuffer global materialBlock
{
    uniform vec3     diffuse = {0.2,0.3,1};
    uniform vec3     ambient = {0.01,0.01,0.1};
    uniform float    specstrength = 0.6;
    uniform float    specexp = 0.5;
};

uniform vec3 lightPos[] = {{10,-10,0},{0,10,0}};
uniform vec3 lightColor[] = {{0.7,0.7,0.7},{0.7,0.7,0.7}};

//////////////////////////////////////////////////////////

RasterizationState rasterState1
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, FILL};
}
RasterizationState rasterStateWire
{
    LINE_WIDTH = 1;
    POLYGON_MODE={FRONT_AND_BACK, LINE};
}
DepthStencilState dstStateFloor
{
    DEPTH_TEST = true;
    DEPTH_WRITEMASK = true;
    DEPTH_FUNC = LEQUAL;
}
//////////////////////////////////////////////////////////////
// GLSL Globals : meaning that all the GLSL domains (vertex, fragments etc.) will have a copy
// of these data
//
GLSLShader 
{
    #version 420 compatibility
}

////////////////////////////////////////////////////////////////////
/// VERTEX PROGRAM /////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader ObjectVS
{
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 Normal;

    layout(location=0) out vec3 outNw;
    layout(location=4) out vec3 outPw;
    layout(location=5) out vec3 outWV;

    out gl_PerVertex {
        vec4 gl_Position;
    };

    void main(void)
    {
        vec3 N    = normalize((m4_World/*IT*/ * vec4(Normal,0)).xyz);
        vec4 Po    = Position;
        vec3 Pw     = (m4_World * Po).xyz;

        gl_Position = (m4_WorldViewProj * Po);

        outNw           = N;
        outPw           = Pw;
        outWV           = normalize(eyePos - Pw);;
    }
}
////////////////////////////////////////////////////////////////////
/// VERTEX PROGRAM USING UNIFORMS //////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader ObjectVS_Uniforms
{
    layout(location=0) in vec4 Position;
    layout(location=1) in vec3 Normal;

    layout(location=0) out vec3 outNw;
    layout(location=4) out vec3 outPw;
    layout(location=5) out vec3 outWV;

    out gl_PerVertex {
        vec4 gl_Position;
    };

    void main(void)
    {
        vec3 N    = normalize((u_m4_World/*IT*/ * vec4(Normal,0)).xyz);
        vec4 Po    = Position;
        vec3 Pw     = (u_m4_World * Po).xyz;

        gl_Position = (u_m4_WorldViewProj * Po);

        outNw           = N;
        outPw           = Pw;
        outWV           = normalize(eyePos - Pw);;
    }
}
////////////////////////////////////////////////////////////////////
/// FRAGMENT PROGRAM ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
GLSLShader ObjectPS
{
    layout(location=0) in vec3 inNw;
    layout(location=4) in vec3 inPw;
    layout(location=5) in vec3 inWV;

    layout(location=0) out vec4 color;

    void main() 
    {
        vec3 Nn = normalize(inNw);
        vec3 Vn = normalize(inWV);

        vec3 result = vec3(0);
        for(int l=0; l<2; l++)
        {
            vec3 Ln = normalize(lightPos[l] - inPw);
            vec3 Hn = normalize(Vn + Ln);
            float NdotL = max(dot(Ln, Nn), 0.0);
            float HdotN = NdotL > 0.0 ? pow(max(0.0, dot(Hn, Nn)), 128.0*specexp) : 0.0;
            vec3 diffContrib = NdotL * lightColor[l] * diffuse;
            vec3 specContrib = HdotN * lightColor[l] * specstrength;
            vec3 ambientContrib = ambient;
            result += diffContrib + ambientContrib + specContrib;
        }

        color = vec4(result, 0.0);

    }
}
////////////////////////////////////////////////////////////////////
/// Floor things
////////////////////////////////////////////////////////////////////
namespace floor
{
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's VERTEX PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader VS
    {
        layout(location=0) in vec4 Position;
        out gl_PerVertex {
            vec4 gl_Position;
        };
        void main(void)
        {
            gl_Position = m4_ViewProj * Position;
        }
    }
    ////////////////////////////////////////////////////////////////////
    /// FLOOR's FRAGMENT PROGRAM ///////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////
    GLSLShader PS
    {
        layout(location=0) out vec4 color;
        void main() 
        {
            color = vec4(0.3, 0.5, 0.7, 1.0);
        }
    }
}
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////
// Material Technique
////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////

Technique TECH_INIT
{
    Pass init
    {
        PolygonOffset = {1.0,1.0};
        DEPTH_TEST = True;
        DEPTH_FUNC = LEQUAL;
        DEPTH_MASK = True;
    }
}

Technique TECH_WIREFLOOR
{
    Pass p0
    {
        //RasterizationState = rasterStateWire;
        //DepthStencilState = dstStateFloor;

        VertexProgram = floor::VS;
        FragmentProgram = floor::PS;
    }
}
Technique uniformBlock
{
    Pass uniformBlock
    {
        RasterizationState = rasterState1;
        VertexProgram = ObjectVS;
        FragmentProgram = ObjectPS;
    }
}
Technique Uniforms
{
    Pass Uniforms
    {
        RasterizationState = rasterState1;
        VertexProgram = ObjectVS_Uniforms;
        FragmentProgram = ObjectPS;
    }
}
